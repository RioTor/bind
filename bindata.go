// Code generated by go-bindata.
// sources:
// frontend/public/css/style.css
// frontend/templates/about.html
// frontend/templates/code.html
// frontend/templates/contact.html
// frontend/templates/donate.html
// frontend/templates/downloads.html
// frontend/templates/index.html
// frontend/templates/jobs.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _publicCssStyleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xca\x4f\xa9\xac\x4e\xcb\xcf\x2b\xd1\x2d\xce\xac\x4a\xb5\x32\xb4\x28\xa8\xb0\xae\xe5\x02\x04\x00\x00\xff\xff\xea\x6c\x28\xab\x16\x00\x00\x00")

func publicCssStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_publicCssStyleCss,
		"public/css/style.css",
	)
}

func publicCssStyleCss() (*asset, error) {
	bytes, err := publicCssStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/css/style.css", size: 22, mode: os.FileMode(420), modTime: time.Unix(1513230898, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesAboutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\x4f\x4b\xc4\x30\x10\xc5\xef\xfd\x14\x8f\x3d\x2f\x86\xbd\x8f\x5d\x44\x41\xf0\x24\x78\xf0\x9c\x6d\xa6\x9b\x48\x3a\x13\x92\xa9\xbb\xfd\xf6\xd2\x56\xc1\xdb\xfc\x79\xfc\xf8\xf1\x28\xda\x94\xfb\x8e\x22\xfb\xd0\x77\x00\x59\xb2\xcc\xfd\xd3\x45\x67\x23\xb7\x2f\x1d\xb9\xfd\x4d\x17\x0d\xcb\x96\x6a\x3c\x58\x52\x59\x67\x80\xe2\xa9\xff\x9a\x9b\xc1\xa3\x4d\x3e\x67\x0c\x3a\x15\x2f\x0b\x82\x26\xb9\x62\x50\xcd\x68\x36\x8f\x23\x46\xad\xf0\xd5\x52\xb3\x46\x2e\x9e\x36\x94\xfb\xc7\xa2\x51\xd5\xb8\xfe\x62\x43\xfa\xee\x5f\x14\x8b\xce\xb8\x79\x31\x44\xce\xe5\x8c\x67\x2f\xdb\x69\xd0\xc0\x67\x7c\x32\x84\x39\x80\x5b\xc1\xfb\x62\x51\xe5\x88\xb7\x8f\x23\x5e\x15\x5e\x02\x4a\xd5\x6b\xf5\xd3\xb4\x7a\xa8\x20\x27\x99\xef\xd0\x8a\x5b\x92\xa0\xb7\x06\xbe\x17\xae\x89\x65\xe0\x07\xf2\x88\x95\xc7\xc7\x83\x5b\xc9\x87\xde\x97\x92\x17\x72\xbe\x27\xb7\x8a\x74\x9b\xeb\x9f\x1f\xb9\xbd\x0a\x72\x7b\x7f\x3f\x01\x00\x00\xff\xff\x25\xc4\xe5\x5b\x47\x01\x00\x00")

func templatesAboutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesAboutHtml,
		"templates/about.html",
	)
}

func templatesAboutHtml() (*asset, error) {
	bytes, err := templatesAboutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/about.html", size: 327, mode: os.FileMode(420), modTime: time.Unix(1513391801, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCodeHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x52\x4d\x6f\xa3\x30\x10\xbd\xef\xaf\x18\x59\xda\x63\xb0\xa3\xcd\x97\x58\x60\xb5\x1f\x5a\x6d\xb4\x89\x56\xab\xf4\xf3\x54\x19\x3c\xc1\x6e\x31\x46\xd8\x0d\x21\x55\xff\x7b\x15\xdc\xa4\x55\xc8\xa9\x5c\xe0\xcd\x9b\x79\xc3\x9b\x99\x48\x3a\x5d\x24\x9f\x00\x00\x22\x89\x5c\x24\x11\xed\x5e\x3e\x92\x1a\xd1\xfa\xcf\x0e\xaa\x75\xcd\x35\x42\x56\x70\x6b\x63\xd2\x01\x02\xb6\xce\x62\x22\x9d\xab\x6c\x48\xa9\x30\x99\x0d\x72\x63\xf2\x02\x83\xcc\x68\xba\x36\xb5\xb6\x54\x50\xa4\xc3\xdf\xdf\xe7\xd5\xff\xc5\x0a\xab\x71\x73\x79\x2f\x6f\xd9\x48\x5d\xdd\xfd\xda\x59\x57\x4d\xff\x8c\x57\x73\x37\x5b\xfe\x28\xa6\x9b\x49\xfb\x0f\x2f\x66\xfa\xcb\xcf\x74\x79\xf3\x77\x74\x9d\xab\x9c\x6e\x14\x36\x7b\x99\x6f\xa8\x53\x14\x02\x45\xec\xea\x47\x24\xd0\x28\xe1\x64\x4c\xa6\x13\x46\x40\xa2\xca\xa5\x8b\xc9\x98\x31\x02\xdd\x7f\xa5\xa6\x16\x58\xc7\x84\x11\xd0\xbc\xce\x55\x79\x48\x39\x06\x5e\xeb\x19\x49\x16\x86\x0b\x55\xe6\x41\x10\x44\xd4\x5b\x7c\xe7\xd9\xba\xb6\xc0\x64\x3f\x08\x78\x3a\x46\x0f\x8f\x57\x0a\x81\x7d\xed\x51\x15\x17\x7b\xd1\x33\xdc\xf3\x09\x3e\x81\x81\x1f\x72\xbf\x99\x50\xb6\x2a\x78\x1b\x42\x5a\x98\xec\xa1\xdf\xb1\x33\x14\xc2\x90\xb1\x4d\xd3\x67\xbd\x7f\x4f\xcb\x3e\xad\xf9\x76\xf0\x26\xf0\xf9\x5c\xc2\x07\xac\x02\xf8\x3d\x84\xc0\xa0\x34\x25\x9e\xe3\xb7\x03\xab\x76\x5d\xb9\xcf\x1d\xa4\x66\xdb\x1b\x59\x44\xfd\x1e\xfc\x59\x52\x7f\x97\x11\xed\x8e\xf7\x25\x00\x00\xff\xff\xb7\x56\x5b\xa4\xc3\x02\x00\x00")

func templatesCodeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCodeHtml,
		"templates/code.html",
	)
}

func templatesCodeHtml() (*asset, error) {
	bytes, err := templatesCodeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/code.html", size: 707, mode: os.FileMode(420), modTime: time.Unix(1513282180, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesContactHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\xc9\x28\xc9\xcd\xb1\xe3\xb2\xc9\x48\x4d\x4c\xb1\xe3\x52\x50\xb0\x29\xc9\x2c\xc9\x49\xb5\x73\xce\xcf\x2b\x49\x4c\x2e\xb1\xd1\x87\x70\xb9\x6c\xf4\x21\x0a\x6c\x92\xf2\x53\x2a\x41\xea\xa0\x0a\xb8\x6c\xf4\x21\x22\x36\xfa\x10\x83\x00\x01\x00\x00\xff\xff\xb0\x5e\xe6\xe6\x50\x00\x00\x00")

func templatesContactHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesContactHtml,
		"templates/contact.html",
	)
}

func templatesContactHtml() (*asset, error) {
	bytes, err := templatesContactHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/contact.html", size: 80, mode: os.FileMode(420), modTime: time.Unix(1513230898, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDonateHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x4f\x6f\xda\x40\x10\xc5\xef\x7c\x8a\x91\x7b\x49\xa5\xa8\xc6\x06\x82\x8d\x1c\xa4\x00\x8e\x90\xd2\xaa\x7f\x30\x87\xf6\x36\xf6\x4c\xf1\xaa\xcb\xae\xd9\x5d\x1a\xfc\xed\x2b\xff\x89\xab\xa8\x1c\x9a\xbd\xf8\xad\xbc\x7e\xf3\xe6\x37\xeb\xa4\x74\x47\xb9\x1c\x01\x00\x24\x25\x23\x75\xb2\xdd\xe6\x9a\xea\xbf\xdb\x66\x8d\x48\x2b\x74\x42\x2b\x0b\x68\x18\xb0\x28\xb8\x72\x4c\x0b\x18\x8d\x12\x12\xbf\x7b\x9b\x41\x35\x8b\x50\xc8\x1a\xc8\x30\x1e\x65\x0d\x07\x8d\x12\x86\x77\x9f\x95\xac\xc1\xb2\x22\x58\x09\x57\x68\xa1\xe0\x66\x95\xad\xdf\x83\xd3\xe0\x4a\x61\x01\x89\x0c\x5b\x3b\x9c\xdf\xb1\x22\xa1\x0e\x80\xaa\x06\xed\x4a\x36\x40\xe2\x20\x1c\x4a\x40\x6b\xd9\xdd\x82\x50\x85\x3c\xb7\x47\x5e\x0c\xd7\x68\x4b\x40\x45\xb0\xdf\x6d\xb2\x5b\x78\x16\x52\x82\x61\x7b\x96\x0e\x84\x82\x8a\xcd\x11\x15\x2b\x07\x52\x5b\xfb\x61\x28\x94\xf7\x5f\xf7\x01\x16\x90\xd8\x0a\x15\x58\x57\x4b\xbe\xf7\x72\x6d\x88\xcd\x22\xac\x2e\x60\xb5\x14\x04\xef\x88\xc8\x03\x41\xf7\x5e\xee\x0a\x6f\x19\x84\x9f\xc2\x73\xbe\x9d\x88\x87\x2d\x3e\xdb\x69\xf0\x6d\x9a\x19\xbb\x99\x9f\x1e\xbf\xa7\x74\xda\xef\x82\xc9\x63\xe2\x37\x7e\x3d\x2e\xbf\xe5\xd5\x3f\x3a\x8e\x2d\xeb\xd7\x84\xd2\xb6\xdf\x9b\x34\xdb\x5e\xe7\xf3\x06\x36\x69\xb6\xfe\x2f\x12\x6d\x94\x3e\xd7\x90\x88\x1b\x6f\x71\x3e\x0e\x6c\x3a\x34\x4d\xf3\xec\x4a\x6f\x39\xbe\x44\xf3\xbb\x3c\x8c\x28\xc0\x55\x38\x8d\x1e\xe2\x74\x3c\xdb\xcc\x31\xe4\x9f\xf1\x78\x3a\x8e\x67\x71\x34\x2f\xa2\x49\x3a\x0b\xee\xe0\x85\xc2\xab\xd6\x87\x19\x48\xe1\xf8\xda\x10\x9a\x4a\xb2\xc1\xfc\x11\xf7\xc5\x25\xf8\x75\xf8\xb2\xd5\x61\x4c\x55\xbd\x9b\x14\x76\xf6\x54\x89\xea\xf2\x35\x3c\xed\xdd\x8f\x27\xf7\x4f\x81\x76\x80\x8d\xf0\x7b\x95\xf8\xdd\x25\x4f\xfc\xee\xee\x27\x7e\xf7\x3b\xfc\x09\x00\x00\xff\xff\x7e\x4b\xb6\xb9\x16\x03\x00\x00")

func templatesDonateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesDonateHtml,
		"templates/donate.html",
	)
}

func templatesDonateHtml() (*asset, error) {
	bytes, err := templatesDonateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/donate.html", size: 790, mode: os.FileMode(420), modTime: time.Unix(1513336731, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDownloadsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xc9\x2f\xcf\xcb\xc9\x4f\x4c\x29\xe6\x02\x04\x00\x00\xff\xff\x34\x32\x97\x89\x0a\x00\x00\x00")

func templatesDownloadsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesDownloadsHtml,
		"templates/downloads.html",
	)
}

func templatesDownloadsHtml() (*asset, error) {
	bytes, err := templatesDownloadsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/downloads.html", size: 10, mode: os.FileMode(420), modTime: time.Unix(1513239835, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x38\xdb\x8e\xdb\xc6\xd9\xf7\x7a\x8a\xef\x1f\x1b\xa1\xf4\x57\x22\xa5\x3d\x38\x81\x2c\x32\x75\xb3\x5e\x67\x01\xc7\x0e\xec\x0d\x8c\x20\x08\x82\x11\xf9\x89\x9c\xdd\xe1\x0c\x3b\x33\x94\x56\x15\xb6\xe8\x0b\xf4\xa6\x57\x0b\xb4\xc5\xde\xe4\x11\xfa\x60\xfb\x08\xc5\x0c\x49\x89\xda\x95\xd7\x56\x8a\xa2\xbc\x90\xe6\xf0\x9d\x4f\x33\xdf\x4c\x32\x93\xf3\xa8\xd3\x99\x64\x48\x93\xa8\x03\x00\x30\xe1\x4c\x5c\x82\x42\x1e\x7a\x2c\x96\xc2\x83\x4c\xe1\x2c\xf4\x66\x74\x6e\xa7\x3e\x8b\xe5\xd7\xf3\xf0\xc0\x83\xa0\x06\xcf\xd1\x50\x10\x34\xc7\x90\xcc\x19\x2e\x0a\xa9\x0c\x81\x58\x0a\x83\xc2\x84\x64\xc1\x12\x93\x85\x09\xce\x59\x8c\x03\x37\xe9\x03\x13\xcc\x30\xca\x07\x3a\xa6\x1c\xc3\x11\xd9\x26\x15\x67\x54\x69\x34\xa1\x57\x9a\xd9\xe0\x2b\xaf\xde\x32\xcc\x70\x8c\xee\x6e\x6f\xfe\x7a\x77\x7b\xf3\xf7\xbb\xdb\x9b\x7f\xdd\xdd\xde\xfc\xf3\xee\xf6\xe6\x1f\x77\xb7\xbf\xfe\x7a\x77\x7b\xf3\xb7\xbb\xdb\x9b\xbf\x9c\xbc\x7b\xf9\xe2\xbb\xd7\x3f\x4e\x82\x0a\xbc\x33\x09\x2a\xbd\x26\xb4\xd2\x82\x04\x24\xca\x64\x8e\x93\x80\xb6\x17\x13\xb9\x10\x5c\xd2\x44\x93\x68\x3d\xbc\x07\x72\x41\xa2\x0b\x39\xbd\xbf\x5a\x06\xab\x95\xff\x83\x46\x75\x7d\x4d\xa2\xf5\xb0\x02\xca\x46\xa0\xcd\x92\x63\x48\x64\x69\x38\x13\x38\x7e\x32\x1c\x9e\x9e\x0e\x87\xa4\x56\x69\x1a\xad\x56\xe0\x33\xfd\x41\xaa\x4b\x26\x52\xb0\x88\x53\xeb\x8b\x20\x1b\x39\xfc\x1a\xee\xff\x06\x03\x58\xb3\xcc\x8c\x29\xf4\x38\x08\x62\x29\xb4\xe4\xe8\xc7\x5c\x96\x89\x9f\x4a\x99\xda\x89\xcc\x03\x6d\xa4\xa2\x29\x06\x53\x25\x17\x1a\x55\x90\x20\x16\x29\x9b\x05\x09\x55\x0b\x26\x82\xaf\x0b\x25\x2f\x30\x36\x61\xa2\x90\xe6\x7c\x39\x18\x91\xe8\x84\x29\x8c\x0d\x34\xaa\x5b\xf1\x61\x30\xa8\xb8\x9f\x67\x4c\x03\x2d\x0a\x98\xa3\xd2\x4c\x0a\x60\x7a\x0c\xab\x95\x3f\xbf\xbe\xae\xa4\xfb\x6f\x0a\xf6\x4d\x86\xf1\x25\xb0\x19\x98\x0c\x15\x7a\x1a\xa8\x80\xb2\x48\xa8\x41\xbf\xb2\x71\x65\xa9\x69\x04\xef\x51\x24\x70\x8a\x98\x4c\x69\x7c\x09\x46\x8e\x6b\x13\xab\x68\x3d\x00\xc3\x72\x69\xb2\xe5\x54\x0a\xfc\x7d\x9a\x53\xc6\xad\x58\x1d\x67\xf3\x09\xcb\x53\xd0\x2a\xde\xa8\xb1\x58\x2c\x6a\xe1\x69\xc1\xb4\x53\xa0\xb1\xcf\x5a\x93\xf9\x28\x98\xae\xd5\x90\x81\x9f\x32\xc3\x52\x21\x15\x7e\x9d\xa2\x40\x45\x0d\x93\x22\x1c\x1d\x8f\x0e\x9e\x1d\x3e\x3b\xfa\x72\x74\x78\x38\x1a\x3d\x7b\xf6\x05\xe5\x26\xcc\x31\x61\x94\x80\x1d\x12\x62\x35\x50\xf5\x4f\x33\x6c\x42\x27\x96\x5c\xaa\xb1\x4a\xa7\xdd\xd1\x57\x5f\xf6\xe1\x78\xd8\x87\xd1\xe1\xb0\x57\x87\xd0\xc6\x2a\x48\xf5\x12\x0a\x4e\x63\x04\x23\x21\x45\x03\x29\x9b\xe9\xfb\x56\x68\xfb\x6a\x1c\x04\x29\x2b\xb2\xa5\x55\x8d\x80\xa1\x2a\x45\x13\x92\x5f\xa6\x9c\x8a\x4b\x12\xb9\xad\xda\xc6\xd3\x4a\x36\x38\x7d\xfb\xfa\xe4\xe5\xbb\xf7\xf0\xe1\xec\xfc\x5b\xf8\xf1\xed\x0f\xef\xe0\xf4\xec\xf5\xcb\xf7\x63\xb7\x3b\x53\x34\x47\x3d\x86\x3f\x07\x27\xa8\x2f\x8d\x2c\x82\xda\x8f\x41\xb5\xe3\x80\x68\x99\x30\xb9\x0b\xc6\x6d\x38\x90\x39\x4b\x70\x27\x88\xdb\x70\x20\x5c\xa6\x3b\x19\xd9\xf5\x4e\x67\x32\x93\x2a\x07\x1a\x3b\xe3\x93\x94\x40\x8e\x26\x93\x49\x48\x0a\xa9\x4d\x93\x7a\x4c\x14\xa5\x01\xb3\x2c\x30\xf4\x66\x8c\xa3\x57\x17\x30\x3b\x76\xe5\xe8\x01\x18\xd1\xe5\x34\x67\x96\xc0\x24\xb0\x1c\xa2\xce\x24\x61\xf3\x26\xba\xb6\xdd\x35\xe5\x25\xce\x99\xe4\x68\x48\xf4\xee\xec\xd5\xb7\xe7\xf0\xe6\xed\x07\x78\xfb\xe6\xf5\x8f\xf0\xe2\x9b\x6f\x5e\x7e\x7f\x7e\xf6\xe6\x15\xbc\x3a\x3b\x85\x17\x6f\x4e\xe0\xbb\xef\x8f\x2a\x3b\x56\x86\x0e\x1c\xd5\x0e\xd5\xc9\x8c\xea\x99\xee\x74\xda\x7c\x9c\x6a\x52\x54\xa2\x84\x44\x67\x72\xf1\x2d\x4b\xb0\xdb\x23\x6b\x85\x83\xfb\x1a\x03\x8a\xb8\xd2\x20\x2f\xb9\x61\x05\x55\xc6\x29\x30\x48\xa8\xa1\xb5\x3d\xb6\xa2\xe4\xe1\xc4\x16\xa0\x13\xc4\x02\x15\x38\x5b\x8f\x61\xa2\x91\xdb\x92\x51\x59\x2d\x71\x7b\x04\x58\xe2\xa2\x19\x1e\x7c\x13\x59\x58\xe9\x60\x4e\x79\x89\x21\x19\x12\xa8\xf0\x31\x89\x86\x93\xa0\xda\xfc\x0c\xbc\x51\x0b\x6f\xb4\x07\xde\x41\x0b\xef\x60\x0f\xbc\xc3\x06\x2f\x89\x0e\xf7\x40\x3b\x6a\xb1\x3b\xda\x03\xef\xb8\x85\x77\xfc\x31\xbc\x49\x50\xc1\x6c\x2a\xb4\xfd\x38\x5d\xa2\x1a\x6f\x3c\x56\xbb\xc7\x3a\x44\x23\x27\x10\x73\xaa\x75\x48\x7c\x37\xa9\x9c\xe6\x50\xee\x79\x6b\x5b\x20\x2f\x67\x57\x98\x1c\x52\x6f\x23\xd6\x59\x5e\x28\xd4\xf6\x1c\x60\xda\xec\x16\x71\x27\x8d\xa9\x17\x7d\x4f\x99\x30\x4c\xa4\x9f\x8f\x75\x44\xbd\xe8\xe5\x12\xf5\x1e\x18\x53\x2f\x3a\x57\x8c\x8a\x94\xef\x85\x16\x7b\xd1\x07\x3a\xdf\x0b\x25\xf1\xa2\x73\x26\xf6\x40\x40\x2f\x3a\x91\xe9\x1e\x2c\x8e\xa9\x17\xbd\x10\x2c\xa7\x7c\x0f\x9c\xa9\x17\xbd\x37\xaa\x8c\x4d\xa9\x76\xa9\xb3\x8e\x9e\xce\xc7\xf3\x9e\x99\xfa\xe8\xd2\xd0\x55\x18\xcb\x3c\xb7\x67\xeb\xf1\xe0\x68\xd8\x6b\x45\x58\xbb\x34\x8a\x32\x9f\xda\xfc\xd7\x06\x0b\x97\xa5\x39\xbd\x0a\xc9\x97\xc3\x26\xd4\x36\x14\xc9\x26\x95\xa3\x0c\x79\x31\x2b\x39\x14\xb2\x28\x0b\x58\x30\x91\xc8\x05\xd0\xa9\x2c\x0d\x2c\x32\x6a\xc0\xd8\x9b\x07\xd3\xdb\x65\xc8\x0a\xb8\xc5\x3b\xb6\x57\x84\xa9\xbc\xda\xf0\x52\x24\x82\x9c\x5e\x22\xb4\x14\x51\x54\x24\x32\x07\x9c\xa3\x5a\x82\x3b\x90\x60\x8a\x66\x81\x28\x60\x04\x83\x83\xe1\x56\x32\x3d\xb0\x88\x8c\x8d\x8d\x8e\xb6\x39\x46\x83\xa3\x3d\xad\xd1\x08\x58\x13\x6b\x5b\x62\x8b\x59\x75\x5c\x82\x2d\xb6\x1a\x63\x29\x92\x31\x74\x8f\x81\x69\x58\x33\xc7\xa4\xf7\x38\xe7\xfe\x3d\xde\x87\x43\xbb\x56\x9f\x70\xc5\x86\xf5\x31\x89\xf6\xb4\xae\x8c\xd7\xd6\xdd\xd3\xa6\x6b\xf2\x36\xc2\x72\x9a\x22\x08\x34\x90\x23\x15\xe3\x6d\x25\x0c\x5e\x99\xb5\x33\xb7\x00\x09\xb4\x13\xa0\x21\x56\xd9\x13\x5c\x2f\xf1\x08\xa9\x36\xd8\x6e\x42\xee\x68\x03\x8e\x73\xe4\xfa\x11\x42\x6d\xb0\xc7\x08\x39\x4e\x10\x4b\x9c\xcd\x58\xcc\x50\x98\x4f\xd2\x7c\x80\xb1\x9b\x7c\x2e\x13\x84\x6e\x5c\x94\x20\x15\xa4\x45\xd9\x7b\x84\xf0\x03\x58\x02\x11\x6c\x15\x71\xb0\x75\x99\x89\xb4\x0f\xb6\xd4\xf6\x61\x5d\x3e\xfb\xe0\x4a\x62\x1f\xce\x99\x58\x82\x2d\x5d\x7d\xa8\xca\x91\x86\x4d\x89\x71\x08\x45\xb1\xdc\x21\x27\x5e\xd9\x56\x10\xb4\xbd\x1b\x50\x83\xd0\xdc\x10\xff\xf7\xc2\x6e\x47\xe6\xfa\x7a\xd5\x7c\xb6\x57\xa3\x0a\x98\x88\x15\x52\x8d\xc0\x44\xab\x94\x8c\xb7\x6b\xf0\xa7\x13\xff\x70\x7d\xe0\x32\xb2\xb9\x00\xb5\x4b\xf2\x96\x00\x0f\xc5\xa9\xf2\x8c\xfd\x09\xab\x53\x1e\x66\x52\x01\xd2\x38\xab\x0c\xfa\x88\x3c\x6e\x4c\xa0\x66\xaf\xf8\x9a\xfd\x09\xce\x68\xc9\xcd\xba\xef\xfe\x2c\x31\x16\x74\x8e\x0a\xca\xc2\x3a\xc7\x76\x42\xed\xf2\xfa\xd9\x22\x7d\xc2\x44\x6c\xf1\xdb\x4c\xf4\x40\xb6\xa6\x62\xff\x87\x82\x8d\x7e\x83\x60\xf7\xd7\xa6\x2a\x7a\x75\x76\x1a\xd8\x6b\xbe\x14\x7c\x09\x5d\x2b\x93\x90\x8b\x8f\x1c\x1f\x3b\xda\x11\x7b\x8b\x63\x79\x7a\x26\x8a\x6d\x8f\xd9\x9e\xd5\xee\x4d\x39\xcd\x48\xd5\xbd\x3e\x69\x7a\xca\x6d\x40\x47\xde\x82\x56\x04\xb7\x1a\x9a\x46\x2f\x6d\xa8\x32\xd5\xfd\x9e\x89\x94\x34\x2d\x50\xdd\xec\x6c\xdb\xbd\xa5\xa3\x5d\x74\xa4\x33\x96\x24\x28\x7e\x49\xd8\x9c\x34\xdd\x50\xc2\x74\xc1\xe9\x72\x2c\xa4\xc0\xb6\xd5\xb2\x51\x74\xca\x38\x82\x5e\x6a\x83\x39\x14\xb6\xc8\x33\x0d\xb6\xb7\x76\xc9\x9d\x51\x91\x82\x14\x40\xed\x09\xe8\xfb\xbe\x3f\xee\x41\xd5\xea\xb7\x98\x37\x9d\xd2\x44\xc7\x8a\x15\xa6\xda\x4b\x64\x5c\xe6\x28\x8c\x9f\xa2\x79\xc9\xd1\x0e\xff\xb0\x3c\x4b\xba\x95\x55\x7b\xbe\x14\xb1\x25\x8e\x10\xc2\xac\x14\xae\x65\x82\x6e\x0f\x56\x6b\xd9\x9e\x76\xbd\x84\x29\xaf\xe7\x53\x63\x54\x97\x38\xdb\x90\x3e\x74\xbd\xf7\xf5\x15\x18\x2c\xa5\x31\x78\xf0\x3b\x77\x41\xf1\x1d\x44\xaf\xf7\xdc\x51\xb8\x7e\xde\xe9\x4c\x82\x5a\x20\x58\xad\x94\xe3\xf5\x94\xf5\xe1\x29\x85\x71\x08\xbe\x6d\xca\xaf\xaf\x3b\x13\xd7\xcc\x36\xb7\x72\x93\xa1\x9b\x13\xa8\x1e\xcb\xc8\xe1\xc1\x90\x40\x86\x2c\xcd\x4c\x48\x0e\x8e\x86\xd5\x73\x9a\x92\x5c\x43\x5e\x5a\x19\xb8\x94\x45\x6d\x0c\x2d\x4b\x15\x63\xe5\xfd\xd5\xea\x29\xbd\xbe\x6e\xfc\xeb\x68\x06\x79\x71\xe4\x7a\x56\x37\x8b\x3a\xab\x15\x8a\xc4\x4a\x50\x09\xb9\xfd\xe6\x41\x2f\xe8\xd5\xfd\x47\x0f\xbb\x16\x70\x36\xd5\xc1\xc5\x1f\x4b\x54\xcb\xe0\xc0\x1f\xf9\xa3\x7a\xe2\xe7\x4c\xf8\x17\x9a\x44\x6b\xa5\xeb\xf6\xdb\xc5\x9a\x54\xf9\x88\x80\x2a\x05\xb5\xbd\x2a\xaa\xb9\xeb\x37\x36\xfd\x73\xdb\x71\xcd\xab\x11\x97\x69\x97\x30\x2f\x07\x2e\xd3\xd4\xc6\x61\x75\xd5\xa9\xfb\x99\xf0\xa3\x0e\x76\x6d\x4e\x1b\xf6\xa7\xef\xa8\xc9\xfc\x19\x97\x52\x75\xdd\xb0\x2a\xa3\xdd\x1e\xfc\x7f\x0d\xe1\x73\x14\xa9\xc9\x7a\x3f\xfb\x4d\x7b\x03\x21\x18\x55\xa2\xa3\xc2\x1e\xe5\xc6\x0c\xe9\x55\x09\x12\x04\xb6\x44\x23\x4d\xc0\x64\xe8\x82\x03\x0a\x6a\x32\xb7\xb7\x0e\x31\xbb\xff\xc3\xbb\xd7\x5d\x97\x88\x36\xdc\xd6\xf1\xc6\x66\x50\xad\xfa\x16\x55\xc3\x17\x5f\x40\x6b\xfa\xd3\xf0\xe7\x76\x70\xda\x6f\x4e\x95\x23\x87\x0a\x42\x10\xb8\x00\x9b\x49\xef\xdc\x42\xb7\xf7\xbc\xb3\x7d\x72\xb8\x65\x5f\xba\x57\xab\xad\x90\xc7\xfb\x64\xeb\xd8\x7f\x62\x6b\x49\x13\xfd\x9e\x56\xb1\xd7\x07\xf4\xab\xc7\x21\x5f\xa1\x2e\xb9\xb9\xcf\xe4\x7a\x27\x4f\xfb\xf7\x42\x9f\x50\x43\xd7\x7a\x6f\x54\x7a\xde\xd9\x20\xb7\x48\x3c\xed\x92\x27\x75\x9d\xeb\xf9\x55\x9e\x76\x77\x67\x69\x63\x4f\x9b\x81\x4d\xea\xf5\x9e\x77\xb6\xa2\x50\x1a\x54\xf7\xeb\x16\xb4\x1f\xc1\x5c\xab\x41\x22\xf7\xe7\x5e\xba\xb6\x8a\x4b\x43\xa0\x33\x09\xdc\x13\xf9\xbf\x03\x00\x00\xff\xff\x46\xd1\x6b\x70\x29\x17\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 5929, mode: os.FileMode(420), modTime: time.Unix(1513475902, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesJobsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xc9\x2f\x29\x56\xc8\x4f\x53\xc8\xca\x4f\x2a\x56\x28\xca\x2f\xcd\x4b\x51\xc8\x48\x2d\x4a\x55\x00\x04\x00\x00\xff\xff\xcd\xcc\x31\x59\x18\x00\x00\x00")

func templatesJobsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesJobsHtml,
		"templates/jobs.html",
	)
}

func templatesJobsHtml() (*asset, error) {
	bytes, err := templatesJobsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jobs.html", size: 24, mode: os.FileMode(420), modTime: time.Unix(1513241341, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"public/css/style.css": publicCssStyleCss,
	"templates/about.html": templatesAboutHtml,
	"templates/code.html": templatesCodeHtml,
	"templates/contact.html": templatesContactHtml,
	"templates/donate.html": templatesDonateHtml,
	"templates/downloads.html": templatesDownloadsHtml,
	"templates/index.html": templatesIndexHtml,
	"templates/jobs.html": templatesJobsHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"style.css": &bintree{publicCssStyleCss, map[string]*bintree{}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"about.html": &bintree{templatesAboutHtml, map[string]*bintree{}},
		"code.html": &bintree{templatesCodeHtml, map[string]*bintree{}},
		"contact.html": &bintree{templatesContactHtml, map[string]*bintree{}},
		"donate.html": &bintree{templatesDonateHtml, map[string]*bintree{}},
		"downloads.html": &bintree{templatesDownloadsHtml, map[string]*bintree{}},
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
		"jobs.html": &bintree{templatesJobsHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

